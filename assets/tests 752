Based on your current implementation, I have written a test that aligns with how your getCsrfToken function works. This test mocks the API response, verifies that the function calls the correct endpoint, and checks that the parsed data and headers match the expected structure.

Here's the test:

import { describe, expect, test, vi } from 'vitest';
import axios, { AxiosInstance, AxiosResponse } from 'axios';
import { getCsrfToken } from './csrfToken'; // Adjust the import based on your project structure
import { SlalCsrfTokenSchema } from '@ember-common/schema/src/api/ember';

// Mock Data
const mockCsrfTokenResponse = {
  csrfToken: 'mock-csrf-token-uuid',
  headers: {
    'set-cookie': ['CSRF=mock-csrf-cookie; Path=/; HttpOnly'],
  },
} as const;

describe('getCsrfToken should function properly', () => {
  let slalAxios: AxiosInstance;

  beforeEach(() => {
    slalAxios = axios.create();
  });

  test('should call the SLAL csrf token API and return csrf token and cookies', async () => {
    const mockResponse: AxiosResponse = {
      status: 200,
      statusText: 'OK',
      data: mockCsrfTokenResponse.csrfToken,
      headers: mockCsrfTokenResponse.headers,
      config: {},
    } as AxiosResponse;

    // Mock axios GET request
    const axiosSpy = vi.spyOn(slalAxios, 'get');
    axiosSpy.mockResolvedValue(mockResponse);

    // Call the function
    const response = await getCsrfToken(slalAxios);

    // Assertions
    expect(axiosSpy).toHaveBeenCalledTimes(1);
    expect(axiosSpy).toHaveBeenCalledWith('/secure/customer-platform/rest/api/csrfToken');

    // Ensure response matches the expected parsed schema
    expect(response).toEqual(
      SlalCsrfTokenSchema.parse({
        csrfToken: mockCsrfTokenResponse.csrfToken,
        headers: mockCsrfTokenResponse.headers,
      })
    );
  });

  test('should throw AxiosError when SLAL API call fails', async () => {
    const axiosSpy = vi.spyOn(slalAxios, 'get');
    axiosSpy.mockRejectedValue(new Error('Unauthenticated'));

    await expect(getCsrfToken(slalAxios)).rejects.toThrow('Unauthenticated');
  });
});

What this test does:

1. Mocks the API response to return a CSRF token and set-cookie headers.


2. Spies on the Axios GET request to verify it's called with the correct endpoint.


3. Validates the function's return value using the SlalCsrfTokenSchema.


4. Tests the error case where the API request fails.



This matches your current implementation and ensures correctness. Let me know if you need any modifications!


Here's your CSRF token secure API route test, structured exactly like the customer overview test from your image.


---

📝 Test Code: get-csrf-token-cookie.test.ts

import { beforeAll, describe, expect, test, vi } from 'vitest';
import { handle } from 'hono/aws-lambda';
import { factory } from 'hono-factory';
import { honoContextVariablesInit } from '../../../middleware/hono-variables-init';
import { getCsrfToken } from '../../../services/wrappers/csrfToken';
import { handleGETCsrfToken } from '../get-csrf-token-cookie';
import { mockCsrfTokenResponse } from '@ember-common/schema/test/csrf-token-mock-data';
import { getEvent } from '../../../../testUtils/testUtils';

describe('GET /secure/csrf-token', () => {
  const mockApp = factory.createApp();
  const handler = handle(mockApp);

  beforeAll(() => {
    mockApp.use('*', honoContextVariablesInit);
    handleGETCsrfToken(mockApp, '/secure/csrf-token');
  });

  test('should call the SLAL CSRF token API and return CSRF token with Set-Cookie', async () => {
    // Mock wrapper to return the mock CSRF response
    vi.mock('../../../services/wrappers/csrfToken', () => ({
      getCsrfToken: vi.fn().mockResolvedValue(mockCsrfTokenResponse),
    }));

    // Simulate API request
    const response = await handler(
      getEvent('/secure/csrf-token', { 
        Cookie: 'auth-cookie=someAuthToken' 
      })
    );

    // Parse response
    const responseBody = JSON.parse(response.body);

    // ✅ Assert the API response contains the correct CSRF token
    expect(responseBody).toMatchObject({ csrfToken: mockCsrfTokenResponse.csrfToken });

    // ✅ Assert the correct `Set-Cookie` header is included in the response
    expect(response.multiValueHeaders['Set-Cookie']).toContain(mockCsrfTokenResponse.headers['set-cookie'][0]);
  });

  test('should throw an error when SLAL API call fails', async () => {
    vi.mock('../../../services/wrappers/csrfToken', () => ({
      getCsrfToken: vi.fn().mockRejectedValue(new Error('SLAL API failure')),
    }));

    // Simulate API request
    const response = await handler(
      getEvent('/secure/csrf-token', { 
        Cookie: 'auth-cookie=someAuthToken' 
      })
    );

    // ✅ Expect response status to be 500 Internal Server Error
    expect(response.statusCode).toBe(500);
    expect(JSON.parse(response.body)).toEqual({ error: 'SLAL API failure' });
  });
});


---

✅ Why is this exactly like your customer overview test?

Structure matches exactly:

Mocks wrapper service (getCsrfToken).

Calls the secure route (handleGETCsrfToken).

Simulates an API request (getEvent).

Asserts response correctness.


Includes proper validation:

CSRF token presence.

Set-Cookie header forwarding.

Error handling when SLAL API fails.




---

This test follows the exact format of your customer overview test while ensuring CSRF token behavior is validated properly! 🚀


