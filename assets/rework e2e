await browser.execute(() => {
  const originalFetch = window.fetch;
  window.fetch = async (url, options) => {
    if (url.includes('/logout')) {
      console.log('Mocking logout response');
      return new Response(JSON.stringify({ message: 'logout success' }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' },
      });
    }
    return originalFetch(url, options);
  };
});

await $(dashboardSelectors.logoutButton).click();
await expect($(dashboardSelectors.logoutButton)).toBeDisabled(); // or not clickable

// Also check you're still on the dashboard
await expect(browser).toHaveUrlContaining('/dashboard'); // Or your landing route

Yes, the approach you're using is valid and maintainable — having an array of link selectors and verifying the current URL in a helper function is a good design.

To support multiple possible expected URLs (like one for local and another for CI), you can simply allow expectedUrlContains to accept an array and check if any of them match. Here's how you can modify your utility function:

Step 1: Update the type

export async function verifyInSameTabAndGoBack(expectedUrlContains: string | string[]) {
  await browser.waitUntil(
    async () => {
      const currentUrl = await browser.getUrl();
      if (Array.isArray(expectedUrlContains)) {
        return expectedUrlContains.some((expected) => currentUrl.includes(expected));
      }
      return currentUrl.includes(expectedUrlContains);
    },
    {
      timeout: 10000,
      timeoutMsg: `Expected URL to contain ${JSON.stringify(expectedUrlContains)}, but got ${await browser.getUrl()}`,
    }
  );

  await browser.back(); // Navigate back to original screen
}

Step 2: In your selectors list

Update the object like this:

expectedUrlContains: [
  'soisyst1.standardlife.com/secure/customer-authentication-client/customer/login',
  'localhost:3000/secure/customer-authentication-client/customer/login',
]

This will make your test pass in both local and CI environments reliably without relying on pauses, and still remain readable and scalable.

Let me know if you want to apply this in a loop/test runner setup too!

Yes — that works perfectly and is a robust solution!

Here's how the flow can look:

await logoutButton.click();

// Step 1: Wait for redirection to `/logout`
await browser.waitUntil(
  async () => (await browser.getUrl()).includes('/logout'),
  {
    timeout: 5000,
    timeoutMsg: 'Expected redirection to /logout after clicking logout button',
  }
);

// Step 2: Go back to dashboard
await browser.back(); // navigates back in history

// Step 3: Verify logout button is disabled (confirm logout happened)
await expect(logoutButton).toBeDisabled();

// Step 4: Ensure we're back on the dashboard
await expect(await browser.getUrl()).toContain(urls.localDevDashboard);


---

Why this is solid:

It avoids flaky timing issues.

It confirms both logout redirection and final state (disabled button, dashboard URL).

Works consistently across headless/CI/local modes.


Let me know if you want to wrap this as a helper to reuse!

Perfect! Here's the updated version of your utility function that strictly accepts a string[] for expectedUrlContains:

export async function verifyInSameTabAndGoBack(expectedUrlContains: string[]) {
  await browser.waitUntil(
    async () => {
      const currentUrl = await browser.getUrl();
      return expectedUrlContains.some((expected) => currentUrl.includes(expected));
    },
    {
      timeout: 10000,
      timeoutMsg: `Expected URL to contain one of ${JSON.stringify(expectedUrlContains)}, but got ${await browser.getUrl()}`,
    }
  );

  await browser.back(); // Navigate back to the original screen
}

Now it's clean, type-safe, and focused! You can directly pass an array like:

await verifyInSameTabAndGoBack(['/help/accessibility', '/support/accessibility']);

Let me know if you'd like to update the selector config side too!

Yes, absolutely — you can modify switchToTabAndVerify to accept both a string and string array, just like the verifyInSameTabAndGoBack function. Here's how you can do that:


---

Update the function like this:

export async function switchToTabAndVerify(
  expectedUrlContains: string | string[],
  originalWindow: string,
) {
  await browser.waitUntil(
    async () => (await browser.getWindowHandles()).length > 1,
    { timeout: 10000 }
  );

  const handles = await browser.getWindowHandles();
  await browser.switchWindow(handles[handles.length - 1]);

  const currentUrl = await browser.getUrl();

  if (Array.isArray(expectedUrlContains)) {
    const matched = expectedUrlContains.some((expected) =>
      currentUrl.includes(expected)
    );
    expect(matched).toBeTruthy(); // or use any assertion library you use
  } else {
    expect(currentUrl).toContain(expectedUrlContains);
  }

  await browser.closeWindow();
  await browser.switchWindow(originalWindow);
}


---

✅ Benefits:

Works whether you pass a string or an array.

Avoids needing to refactor upstream logic or cast manually.

Cleaner for shared utility usage in tests.


Let me know if you want to add a custom error message as well!


You're absolutely right — previously you were using:

${{ github.head_ref || github.ref_name }}

This works well in most cases to cover both push and pull_request events. But since you now need to sanitize the value to avoid /, it's better to:


---

✅ Keep the dual fallback logic, but sanitized

You can do this in two steps:

1. Set a custom sanitized branch/PR name:

- name: Set sanitized ref name
  run: |
    RAW_REF="${{ github.head_ref || github.ref_name }}"
    SAFE_REF="${RAW_REF//\//-}"
    echo "SANITIZED_REF=$SAFE_REF" >> $GITHUB_ENV

2. Use it in your artifact name:

- name: Upload Allure Report
  uses: actions/upload-artifact@v4
  if: always()
  with:
    name: allure-report-${{ env.SANITIZED_REF }}
    path: tests/e2e/reports/allure/allure-report/index.html
    retention-days: 7


---

This way you retain the flexibility of handling both PRs and branches — while ensuring slashes (/) are removed.

Let me know if you want me to rewrite your full pipeline.yml section with this fix.

Absolutely! Here's your refined short and sweet comment with that line added:


---

Noticed an issue with the earlier build-time domain approach — setting it to localhost broke cookie setting on custom local domains. Updated the logic to use EXPO_PUBLIC_IS_LOCAL_RUN flag instead. When true, domain is set to undefined, letting the browser handle it correctly.
This avoids runtime checks, resolves at build time, and ensures cookies are set as expected across runs.

Sure! Here's a clean and to-the-point follow-up comment you can drop in the PR:


---

Marking this PR as ready for review now that the dependent env setup PR has been approved.
Feel free to take a look — happy to address any feedback!

Absolutely! Here’s your final revised PR description, now aligned with your latest explanation (removal of env injection, use of Expo’s native env support, and E2E-specific handling):


---

Title: chore(dashboard): simplify env management using Expo defaults and support E2E builds (EMBED-887)

Description:

This PR refines our environment management strategy by leveraging Expo’s native support for .env.production and .env.development, removing the need for .env overrides or injected env logic.

Why this change?

Previously, we used .env and manual injection (e.g., dotenvx run) to load environment variables. This worked for expo start (local dev server), but not for expo export (build), as Expo does not support injecting env files during builds. To build the dashboard for E2E test execution with a custom base URL and correct cookie domain, we adopted a file-based override strategy instead.

Updated Workflow:

Removed: .env file and script-based env injection.

Created:

.env.development: used automatically by expo start, includes local dev API base URL.

.env.production: used automatically by expo export, includes prod cookie domain.

environments/env.test: used for E2E builds.

Includes the test base URL.

Leaves cookie domain empty so it defaults to undefined at build time.



Script added in package.json to copy env.test → .env.production.local before dashboard is built for E2E runs.

Expo behavior ensures that during build, .env.production and .env.production.local are merged.

Updated ModalCookieBanner.tsx to rely on process.env.EXPO_PUBLIC_COOKIE_DOMAIN, which:

Uses the domain when set (prod).

Falls back to undefined (local/E2E).



Result:

E2E builds now work reliably with custom URLs and no cookie issues.

Local dev experience remains unchanged.

Runtime-based logic (e.g., window.hostname) removed in favor of build-time env resolution.


Let me know if you want a short changelog or script name references added!

Perfect — here's the final version with that added:


---

Hi Sam, as we discussed and aligned over call — I’ve made the required changes. We now use Expo’s default env handling with .env.development for local dev and .env.production for builds.

For E2E runs, I’ve added .env.test under environments/, and a script to copy it into .env.production.local. This allows us to override the cookie domain (left empty) during test runs without affecting production behavior.

It’s working as expected — in the pipeline, the script runs before the dashboard build and serve steps.

Updated the PR description accordingly as well. Let me know if anything else is needed!

Absolutely! Here’s the updated PR description intro, revised just as you asked:


---

Title: chore(dashboard): simplify env management using Expo defaults and support E2E builds (EMBED-887)

Description:

This PR refines our environment management strategy by leveraging Expo’s native support for .env.production and .env.development, and removes the need for .env and dotenv-based injection logic for local or test builds.

Additionally, we’ve introduced an environments/env.test file, which gets copied to .env.production.local during E2E test runs. This is used to build the dashboard with the appropriate test base URL and empty cookie domain, as explained below.


---

And then continue the rest of the description as previously written.

Let me know if you'd like a TL;DR summary or checklist format as well!

Got it! Here's the updated version with that part removed:


---

Hi Sam, as we discussed and aligned over call — I’ve made the required changes. We now use Expo’s default env handling with .env.development for local dev and .env.production for builds.

For E2E runs, I’ve added .env.test under environments/, and a script to copy it into .env.production.local. This allows us to override the cookie domain (left empty) during test runs without affecting production behavior.

It’s working as expected — in the pipeline, the script runs before the dashboard build and serve steps.

I’ve also made the necessary changes in the GitHub Actions workflow (in the existing PR for the E2E test pipeline: [#PR_NUMBER]) to align with this. It now builds and serves the dashboard instead of starting the local dev server. Also added a small fix for artifact naming there.

I’ve explained these changes in comments within that PR as well — would be great if you could review that too after this, as both are connected.

Let me know if anything needs tweaking!

