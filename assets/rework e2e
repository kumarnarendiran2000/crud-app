await browser.execute(() => {
  const originalFetch = window.fetch;
  window.fetch = async (url, options) => {
    if (url.includes('/logout')) {
      console.log('Mocking logout response');
      return new Response(JSON.stringify({ message: 'logout success' }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' },
      });
    }
    return originalFetch(url, options);
  };
});

await $(dashboardSelectors.logoutButton).click();
await expect($(dashboardSelectors.logoutButton)).toBeDisabled(); // or not clickable

// Also check you're still on the dashboard
await expect(browser).toHaveUrlContaining('/dashboard'); // Or your landing route

Yes, the approach you're using is valid and maintainable — having an array of link selectors and verifying the current URL in a helper function is a good design.

To support multiple possible expected URLs (like one for local and another for CI), you can simply allow expectedUrlContains to accept an array and check if any of them match. Here's how you can modify your utility function:

Step 1: Update the type

export async function verifyInSameTabAndGoBack(expectedUrlContains: string | string[]) {
  await browser.waitUntil(
    async () => {
      const currentUrl = await browser.getUrl();
      if (Array.isArray(expectedUrlContains)) {
        return expectedUrlContains.some((expected) => currentUrl.includes(expected));
      }
      return currentUrl.includes(expectedUrlContains);
    },
    {
      timeout: 10000,
      timeoutMsg: `Expected URL to contain ${JSON.stringify(expectedUrlContains)}, but got ${await browser.getUrl()}`,
    }
  );

  await browser.back(); // Navigate back to original screen
}

Step 2: In your selectors list

Update the object like this:

expectedUrlContains: [
  'soisyst1.standardlife.com/secure/customer-authentication-client/customer/login',
  'localhost:3000/secure/customer-authentication-client/customer/login',
]

This will make your test pass in both local and CI environments reliably without relying on pauses, and still remain readable and scalable.

Let me know if you want to apply this in a loop/test runner setup too!

Yes — that works perfectly and is a robust solution!

Here's how the flow can look:

await logoutButton.click();

// Step 1: Wait for redirection to `/logout`
await browser.waitUntil(
  async () => (await browser.getUrl()).includes('/logout'),
  {
    timeout: 5000,
    timeoutMsg: 'Expected redirection to /logout after clicking logout button',
  }
);

// Step 2: Go back to dashboard
await browser.back(); // navigates back in history

// Step 3: Verify logout button is disabled (confirm logout happened)
await expect(logoutButton).toBeDisabled();

// Step 4: Ensure we're back on the dashboard
await expect(await browser.getUrl()).toContain(urls.localDevDashboard);


---

Why this is solid:

It avoids flaky timing issues.

It confirms both logout redirection and final state (disabled button, dashboard URL).

Works consistently across headless/CI/local modes.


Let me know if you want to wrap this as a helper to reuse!

Perfect! Here's the updated version of your utility function that strictly accepts a string[] for expectedUrlContains:

export async function verifyInSameTabAndGoBack(expectedUrlContains: string[]) {
  await browser.waitUntil(
    async () => {
      const currentUrl = await browser.getUrl();
      return expectedUrlContains.some((expected) => currentUrl.includes(expected));
    },
    {
      timeout: 10000,
      timeoutMsg: `Expected URL to contain one of ${JSON.stringify(expectedUrlContains)}, but got ${await browser.getUrl()}`,
    }
  );

  await browser.back(); // Navigate back to the original screen
}

Now it's clean, type-safe, and focused! You can directly pass an array like:

await verifyInSameTabAndGoBack(['/help/accessibility', '/support/accessibility']);

Let me know if you'd like to update the selector config side too!

Yes, absolutely — you can modify switchToTabAndVerify to accept both a string and string array, just like the verifyInSameTabAndGoBack function. Here's how you can do that:


---

Update the function like this:

export async function switchToTabAndVerify(
  expectedUrlContains: string | string[],
  originalWindow: string,
) {
  await browser.waitUntil(
    async () => (await browser.getWindowHandles()).length > 1,
    { timeout: 10000 }
  );

  const handles = await browser.getWindowHandles();
  await browser.switchWindow(handles[handles.length - 1]);

  const currentUrl = await browser.getUrl();

  if (Array.isArray(expectedUrlContains)) {
    const matched = expectedUrlContains.some((expected) =>
      currentUrl.includes(expected)
    );
    expect(matched).toBeTruthy(); // or use any assertion library you use
  } else {
    expect(currentUrl).toContain(expectedUrlContains);
  }

  await browser.closeWindow();
  await browser.switchWindow(originalWindow);
}


---

✅ Benefits:

Works whether you pass a string or an array.

Avoids needing to refactor upstream logic or cast manually.

Cleaner for shared utility usage in tests.


Let me know if you want to add a custom error message as well!


You're absolutely right — previously you were using:

${{ github.head_ref || github.ref_name }}

This works well in most cases to cover both push and pull_request events. But since you now need to sanitize the value to avoid /, it's better to:


---

✅ Keep the dual fallback logic, but sanitized

You can do this in two steps:

1. Set a custom sanitized branch/PR name:

- name: Set sanitized ref name
  run: |
    RAW_REF="${{ github.head_ref || github.ref_name }}"
    SAFE_REF="${RAW_REF//\//-}"
    echo "SANITIZED_REF=$SAFE_REF" >> $GITHUB_ENV

2. Use it in your artifact name:

- name: Upload Allure Report
  uses: actions/upload-artifact@v4
  if: always()
  with:
    name: allure-report-${{ env.SANITIZED_REF }}
    path: tests/e2e/reports/allure/allure-report/index.html
    retention-days: 7


---

This way you retain the flexibility of handling both PRs and branches — while ensuring slashes (/) are removed.

Let me know if you want me to rewrite your full pipeline.yml section with this fix.

