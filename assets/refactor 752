Here’s the updated implementation for the CSRF token route to follow OpenAPI Spec standards, along with its unit tests and the updated CSRF wrapper and its test.


---

✅ 1. Secure API Route for CSRF Token with OpenAPI Spec

import { getCsrfToken } from '../wrappers/csrfToken';
import { createRoute } from 'hono';

export const handleGETCsrfToken = createRoute({
    method: 'get',
    path: '/csrf-token',
    summary: 'Retrieve a CSRF token',
    description: 'Fetches a CSRF token and sets it in the response cookie',
    operationId: 'getCsrfToken',
    responses: {
        200: {
            description: 'Successfully retrieved CSRF token',
            content: {
                'application/json': {
                    schema: { type: 'string' }
                }
            }
        },
        500: {
            description: 'Internal Server Error',
            content: {
                'application/json': {
                    schema: { type: 'object', properties: { error: { type: 'string' } } }
                }
            }
        }
    }
}, async (c) => {
    try {
        const slalAxios = c.var.axiosInstances.slalAxios;
        const response = await getCsrfToken(slalAxios);

        const csrfToken = response.data;
        const setCookieHeader = response.headers['set-cookie'] || [];

        // Extract CSRF cookie value
        const csrfCookieFromResponse = setCookieHeader.find((cookie) => cookie.startsWith('CSRF='));
        if (csrfCookieFromResponse) {
            const csrfCookieValue = csrfCookieFromResponse.split(';')[0].split('=')[1];

            // Set CSRF cookie using Hono’s c.cookie()
            c.cookie('CSRF', csrfCookieValue, {
                path: '/',
                httpOnly: true,
                secure: true,
                sameSite: 'Strict',
            });
        }

        return c.json(csrfToken);
    } catch (error) {
        console.error('CSRF Token Fetch Error:', error);
        return c.json({ error: 'Failed to fetch CSRF token' }, 500);
    }
});


---

✅ 2. Unit Test for CSRF Token Route (csrfRoute.test.ts)

import { describe, test, expect, vi } from 'vitest';
import { handleGETCsrfToken } from '../routes/secureApiRoute';
import { createApp, createRoute } from 'hono';
import type { AxiosInstance } from 'axios';

describe('CSRF Token Route Tests', () => {
    const mockApp = createApp();
    const route = createRoute();
    handleGETCsrfToken(route);
    mockApp.route(route);

    test('should set CSRF cookie in response', async () => {
        const mockResponse = {
            data: 'mockCsrfToken12345',
            headers: {
                'set-cookie': ['CSRF=mockCsrfCookie12345; Path=/; Secure; HttpOnly']
            }
        };

        const slalAxios = { get: vi.fn().mockResolvedValue(mockResponse) } as unknown as AxiosInstance;
        const c = {
            var: { axiosInstances: { slalAxios } },
            cookie: vi.fn(),
            json: vi.fn()
        };

        await handleGETCsrfToken(c);

        expect(c.cookie).toHaveBeenCalledWith('CSRF', 'mockCsrfCookie12345', {
            path: '/',
            httpOnly: true,
            secure: true,
            sameSite: 'Strict',
        });

        expect(c.json).toHaveBeenCalledWith('mockCsrfToken12345');
    });

    test('should return 500 on error', async () => {
        const slalAxios = { get: vi.fn().mockRejectedValue(new Error('Internal Server Error')) } as unknown as AxiosInstance;
        const c = {
            var: { axiosInstances: { slalAxios } },
            json: vi.fn()
        };

        await handleGETCsrfToken(c);
        expect(c.json).toHaveBeenCalledWith({ error: 'Failed to fetch CSRF token' }, 500);
    });
});


---

✅ 3. Updated CSRF Token Wrapper (csrfToken.ts)

import type { AxiosInstance } from 'axios';
import { Xray } from '../utils/xray';

export async function getCsrfToken(slalAxios: AxiosInstance) {
    const csrfTokenApiEndpoint = '/secure/customer-platform/rest/api/csrfToken';
    const subSegment = Xray.addNewSubSegment(`Call to ${csrfTokenApiEndpoint}`);

    try {
        const response = await slalAxios.get(csrfTokenApiEndpoint, {});
        return response; // Pass the full response to the route
    } catch (error) {
        Xray.addError(subSegment, error);
        throw error;
    } finally {
        Xray.closeSubSegment(subSegment);
    }
}


---

✅ 4. Unit Test for CSRF Token Wrapper (csrfToken.test.ts)

import { describe, test, expect, vi } from 'vitest';
import type { AxiosInstance } from 'axios';
import { getCsrfToken } from '../wrappers/csrfToken';

describe('CSRF Token Wrapper Tests', () => {
    test('should fetch CSRF token successfully', async () => {
        const mockResponse = {
            data: 'mockCsrfToken12345',
            headers: { 'set-cookie': ['CSRF=mockCsrfCookie12345; Path=/; Secure; HttpOnly'] }
        };

        const slalAxios = { get: vi.fn().mockResolvedValue(mockResponse) } as unknown as AxiosInstance;

        const response = await getCsrfToken(slalAxios);

        expect(response).toEqual(mockResponse);
        expect(slalAxios.get).toHaveBeenCalledWith('/secure/customer-platform/rest/api/csrfToken', {});
    });

    test('should throw an error when API call fails', async () => {
        const slalAxios = { get: vi.fn().mockRejectedValue(new Error('Failed to fetch CSRF token')) } as unknown as AxiosInstance;

        await expect(getCsrfToken(slalAxios)).rejects.toThrow('Failed to fetch CSRF token');
        expect(slalAxios.get).toHaveBeenCalledWith('/secure/customer-platform/rest/api/csrfToken', {});
    });
});


---

🔍 Summary of Updates

✔ CSRF Token Route (secureApiRoute.ts)
✔ CSRF Token Route Test (csrfRoute.test.ts)
✔ CSRF Token Wrapper (csrfToken.ts)
✔ CSRF Token Wrapper Test (csrfToken.test.ts)

🚀 Now everything follows OpenAPI spec, best practices, and is fully tested!

Let me know if you need any refinements!

Here’s the final optimized version based on your latest request:

✅ No need to manually set cookie properties (path, domain, etc.)

✅ Just grab the cookie from response and set it as is



---

✅ 1. Secure API Route for CSRF Token (Updated)

import { getCsrfToken } from '../wrappers/csrfToken';
import { createRoute } from 'hono';

export const handleGETCsrfToken = createRoute({
    method: 'get',
    path: '/csrf-token',
    summary: 'Retrieve a CSRF token',
    description: 'Fetches a CSRF token and sets it in the response cookie',
    operationId: 'getCsrfToken',
    responses: {
        200: {
            description: 'Successfully retrieved CSRF token',
            content: {
                'application/json': {
                    schema: { type: 'string' }
                }
            }
        },
        500: {
            description: 'Internal Server Error',
            content: {
                'application/json': {
                    schema: { type: 'object', properties: { error: { type: 'string' } } }
                }
            }
        }
    }
}, async (c) => {
    try {
        const slalAxios = c.var.axiosInstances.slalAxios;
        const response = await getCsrfToken(slalAxios);

        const csrfToken = response.data;
        const setCookieHeader = response.headers['set-cookie'] || [];

        // Grab the full Set-Cookie header and set it as is
        if (setCookieHeader.length) {
            c.header('Set-Cookie', setCookieHeader);
        }

        return c.json(csrfToken);
    } catch (error) {
        console.error('CSRF Token Fetch Error:', error);
        return c.json({ error: 'Failed to fetch CSRF token' }, 500);
    }
});


---

✅ 2. CSRF Token Wrapper (csrfToken.ts)

No changes here; it stays the same since we are passing the full response to the route.

import type { AxiosInstance } from 'axios';
import { Xray } from '../utils/xray';

export async function getCsrfToken(slalAxios: AxiosInstance) {
    const csrfTokenApiEndpoint = '/secure/customer-platform/rest/api/csrfToken';
    const subSegment = Xray.addNewSubSegment(`Call to ${csrfTokenApiEndpoint}`);

    try {
        const response = await slalAxios.get(csrfTokenApiEndpoint, {});
        return response; // Pass the full response to the route
    } catch (error) {
        Xray.addError(subSegment, error);
        throw error;
    } finally {
        Xray.closeSubSegment(subSegment);
    }
}


---

✅ 3. Updated Unit Test for CSRF Token Route (csrfRoute.test.ts)

Updated to check if the cookie is set as is, instead of extracting specific properties.

import { describe, test, expect, vi } from 'vitest';
import { handleGETCsrfToken } from '../routes/secureApiRoute';
import { createApp, createRoute } from 'hono';
import type { AxiosInstance } from 'axios';

describe('CSRF Token Route Tests', () => {
    const mockApp = createApp();
    const route = createRoute();
    handleGETCsrfToken(route);
    mockApp.route(route);

    test('should set CSRF cookie in response as is', async () => {
        const mockResponse = {
            data: 'mockCsrfToken12345',
            headers: {
                'set-cookie': ['CSRF=mockCsrfCookie12345; Path=/; Secure; HttpOnly']
            }
        };

        const slalAxios = { get: vi.fn().mockResolvedValue(mockResponse) } as unknown as AxiosInstance;
        const c = {
            var: { axiosInstances: { slalAxios } },
            header: vi.fn(),
            json: vi.fn()
        };

        await handleGETCsrfToken(c);

        expect(c.header).toHaveBeenCalledWith('Set-Cookie', mockResponse.headers['set-cookie']);
        expect(c.json).toHaveBeenCalledWith('mockCsrfToken12345');
    });

    test('should return 500 on error', async () => {
        const slalAxios = { get: vi.fn().mockRejectedValue(new Error('Internal Server Error')) } as unknown as AxiosInstance;
        const c = {
            var: { axiosInstances: { slalAxios } },
            json: vi.fn()
        };

        await handleGETCsrfToken(c);
        expect(c.json).toHaveBeenCalledWith({ error: 'Failed to fetch CSRF token' }, 500);
    });
});


---

🔍 Summary of Changes

✔ CSRF token is now passed as is from backend response → frontend.
✔ No manual cookie manipulation → avoids unnecessary modifications.
✔ Uses c.header('Set-Cookie', setCookieHeader); to directly send what the backend provides.
✔ Tests updated to validate full Set-Cookie header is passed.


---

🚀 Now your implementation is fully aligned with best practices!

Let me know if you need further tweaks.


You're absolutely right! Since we are just passing the response as-is and extracting the CSRF cookie only in the OpenAPI route, full validation of the response might not be necessary.

What should we validate?

1. CSRF Token (Important ✅)

Since the CSRF token is being returned as a JSON response, it must be validated.

We can ensure it is a valid UUID to prevent invalid or malformed data.



2. CSRF Cookie (Not Necessary ❌)

The cookie is being passed as-is from the backend, and we are not modifying its attributes.

Since cookies are part of the HTTP headers and not JSON, Zod validation does not apply to headers.

If the backend correctly sets the cookie, we don't need to validate it.





---

Refined Implementation with UUID Validation

Zod Schema (csrfToken.schema.ts)

import { z } from "zod";

export const CsrfTokenSchema = z.object({
  csrfToken: z.string().uuid("Invalid CSRF Token"), // Validate as UUID
});

export type CsrfTokenResponse = z.infer<typeof CsrfTokenSchema>;


---

Wrapper (getCsrfToken.ts)

Since we are only validating the token (not the cookie), we modify our wrapper function:

import type { AxiosInstance } from "axios";
import { Xray } from "../utils/xray";
import { CsrfTokenSchema, CsrfTokenResponse } from "../schemas/csrfToken.schema";

export async function getCsrfToken(slalAxios: AxiosInstance): Promise<CsrfTokenResponse> {
  const csrfTokenApiEndpoint = "/secure/customer-platform/rest/api/csrfToken";
  const subSegment = Xray.addNewSubSegment(`Call to ${csrfTokenApiEndpoint}`);

  try {
    const response = await slalAxios.get(csrfTokenApiEndpoint);
    
    // Validate only the CSRF token as a UUID
    const validatedResponse = CsrfTokenSchema.parse({ csrfToken: response.data });

    return validatedResponse;
  } catch (error) {
    Xray.addError(subSegment, error);
    throw error;
  } finally {
    Xray.closeSubSegment(subSegment);
  }
}


---

OpenAPI Spec (secureApiRoute.ts)

We extract the CSRF token, set the cookie as-is, and validate the token only.

import { createRoute } from "@hono/zod-openapi";
import { factory } from "../../hono-factory";
import { getCsrfToken } from "../../services/wrappers/csrfToken";
import { z } from "zod";

export const handleGETCsrfToken = factory.createHandler((app, path) => {
  const routeSpec = createRoute({
    method: "get",
    path,
    summary: "Retrieve a CSRF token",
    description: "Fetches a CSRF token and sets it in the response cookie",
    responses: {
      200: {
        description: "Successfully retrieved CSRF token",
        content: {
          "application/json": {
            schema: z.object({ csrfToken: z.string().uuid("Invalid CSRF Token") }),
          },
        },
      },
      500: {
        description: "Internal Server Error",
        content: {
          "application/json": {
            schema: z.object({ error: z.string() }),
          },
        },
      },
    },
  });

  app.openapi(routeSpec, async (c) => {
    const slalAxios = c.var.axiosInstances.slalAxios;
    const response = await getCsrfToken(slalAxios);

    // Extract CSRF cookie as-is from headers
    const setCookieHeader = response.headers["set-cookie"];
    const csrfCookieFromResponse = setCookieHeader?.find((cookie) => cookie.startsWith("CSRF=")) || "";

    // Set CSRF cookie back in response
    if (csrfCookieFromResponse) {
      c.header("Set-Cookie", csrfCookieFromResponse);
    }

    return c.json({ csrfToken: response.csrfToken });
  });
});


---

Final Thoughts

✅ CSRF Token Validation: Done as UUID (Prevents invalid/malformed values).

❌ CSRF Cookie Validation: Not needed (Passed as-is from headers).

✅ Best Practice:

Validate only the data you control (CSRF Token).

Pass through headers (CSRF Cookie) as-is.



This keeps the implementation efficient, secure, and clean. Let me know if you need any refinements!


PR Title:

Integrate CSRF Token Fetching via Ember Backend Using Mutation

PR Description:

Updated frontend to fetch CSRF token from Ember backend instead of SLAL.

Changed CSRF token retrieval from component mount to trigger on logout button click.

Refactored CSRF token handling to use useMutation() in Tanstack Query.

Modified Logout.tsx, useCsrfToken.ts, and fetchCsrfToken.ts to align with the new flow.


Pull Request Title:

Refactor CSRF Token Handling in Frontend to Use Ember Backend with TanStack Mutation


---

Pull Request Description:

🔹 Summary

This PR refactors the CSRF token flow in the frontend by removing direct API calls to SLAL and instead calling the Ember backend for CSRF handling. Additionally, it modifies the TanStack Query implementation to use useMutation() instead of fetching the CSRF token on component mount.

🔹 Key Changes

1. Updated Frontend API Calls:

Changed CSRF token fetch from SLAL API to Ember backend API.

Ensures all CSRF token handling is done via Ember backend.



2. Refactored CSRF Fetch Logic in TanStack Query:

Replaced useQuery() (which was triggering the CSRF API call on component mount) with useMutation().

Now, the CSRF token is only fetched on logout button click, reducing unnecessary API calls.



3. Code Changes Across 3 Files:

Logout.tsx: Moved CSRF token fetching logic to handleLogout function.

useCsrfToken.ts: Updated implementation to use useMutation() instead of useQuery().

fetchCsrfToken.ts: Ensured it correctly calls the Ember backend.




🔹 Why This Change?

Improves Efficiency: Avoids unnecessary CSRF API calls on page load.

Centralized CSRF Handling: All CSRF-related logic is now handled within Ember backend.

Follows Best Practices: Uses useMutation() to fetch CSRF tokens only when needed instead of preloading them.


🔹 How to Test?

1. Navigate to the application and log in.


2. Click on the Logout button.


3. Observe the CSRF token request being made only on button click (not on page load).


4. Ensure successful logout without issues.



🔹 Ticket/Reference:

[Link to Jira/Ticket if applicable]


---

Would you like me to add anything specific? 🚀


PR Title:

feat(backend): Implement CSRF SLAL API in Ember backend

PR Description:

Added a secure API route to fetch CSRF token from SLAL via Ember backend.

Integrated OpenAPI spec for endpoint definition.

Extracted and set CSRF cookie from response headers.

Applied Zod schema validation for response structure.

Improved error handling and logging.


This ensures secure and standardized CSRF token management via the Ember backend.








