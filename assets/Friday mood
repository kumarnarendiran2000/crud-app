Thanks for the clarity! Based on your exact requirements, here is the most accurate and maintainable approach:


---

Your Goal Recap:

You want the E2E pipeline to run on PR approval (pull_request_review).

But only if the PR includes changes under apps/dashboard/**.

Also support workflow_dispatch (manual run) and schedule (nightly).

Avoid running for unrelated PRs (e.g., backend-only changes).



---

✅ Recommended Solution: Use dorny/paths-filter

This is the cleanest and most flexible approach for your case.


---

1. Install dorny/paths-filter step early in the pipeline:

Add this job before e2e-test, name it filter:

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      dashboard: ${{ steps.filter.outputs.dashboard }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            dashboard:
              - 'apps/dashboard/**'


---

2. Use the output of that filter to conditionally run e2e-test:

Update your existing e2e-test job like this:

e2e-test:
    needs: filter
    if: needs.filter.outputs.dashboard == 'true' &&
        (github.event_name != 'pull_request_review' || github.event.review.state == 'approved')
    runs-on: ubuntu-latest
    steps:
      # your existing e2e-test steps here...


---

✅ This does exactly what you want:

Only runs E2E job if:

PR includes dashboard changes

and PR was approved


Also supports workflow_dispatch and schedule without changes.

Keeps your job fast and minimal for unrelated PRs.



---

Let me know if you want help updating your YAML – I can rewrite the block fully if needed.

Great question! If you’re using dorny/paths-filter and want scheduled or manual (workflow_dispatch) runs to always trigger, you can tweak the condition to support both.


---

Here’s how to make it work for all 3 cases:

if: |
  github.event_name == 'workflow_dispatch' ||
  github.event_name == 'schedule' ||
  (
    needs.filter.outputs.dashboard == 'true' &&
    github.event_name == 'pull_request_review' &&
    github.event.review.state == 'approved'
  )

Explanation:

✅ workflow_dispatch: Always allowed

✅ schedule: Always allowed

✅ pull_request_review: Only runs if:

The PR includes dashboard changes (apps/dashboard/**)

And the review state is approved




---

So your job block will look like:

jobs:
  e2e-test:
    needs: filter
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (
        needs.filter.outputs.dashboard == 'true' &&
        github.event_name == 'pull_request_review' &&
        github.event.review.state == 'approved'
      )
    runs-on: ubuntu-latest
    steps:
      # your existing e2e test steps here...

This gives you maximum flexibility without unnecessary runs. Want me to update your full YAML?

Absolutely! Here's a clean and professional set for your PR:


---

PR Title

refactor(ci): optimize E2E pipeline to run only on relevant dashboard changes


---

PR Description

### Summary
Refactored the E2E pipeline to prevent unnecessary test runs on unrelated PRs.

### Key Changes
- Introduced `dorny/paths-filter` to detect changes specifically under `apps/dashboard/**`
- Added a `filter` job to expose change detection via `dashboard` output
- Updated the `e2e-test` job to run only when:
  - The PR is approved **and** includes dashboard-related changes
  - Or the workflow is triggered manually (`workflow_dispatch`)
  - Or it’s a scheduled job (`schedule`)

### Result
The E2E pipeline is now more efficient, skipping runs for backend or unrelated PRs while still allowing manual and scheduled triggers.

Let me know if you'd like to apply similar logic to other packages!


---

Commit Message

refactor(ci): run E2E pipeline only for dashboard changes or manual/scheduled triggers

Let me know if you want a follow-up Jira comment or PR tag suggestion!

Sure! Here's a short and sweet PR description:


---

Description

Refactored the E2E pipeline to run only when:

A PR is approved and includes changes under apps/dashboard/**

Or triggered manually or on a schedule


Used dorny/paths-filter to detect relevant changes and avoid unnecessary E2E runs.


---

Let me know if you need a Jira comment too!

Here's a clean and complete refactor of your GitHub Actions workflow to replace dorny/paths-filter@v2 with an inline shell script, since third-party actions like dorny aren't allowed in your enterprise setup.


---

What we're replacing

You're removing this:

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      dashboard: ${{ steps.filter.outputs.dashboard }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            dashboard:
              - 'apps/dashboard/**'


---

Refactored Inline Version

Replace it with this (drop-in replacement):

jobs:
  check-dashboard-changes:
    runs-on: ubuntu-latest
    outputs:
      dashboard-changed: ${{ steps.set-output.outputs.dashboard_changed }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect dashboard changes
        id: set-output
        run: |
          echo "dashboard_changed=false" >> $GITHUB_OUTPUT
          git fetch origin main
          if git diff --name-only origin/main...HEAD | grep '^apps/dashboard/'; then
            echo "dashboard_changed=true" >> $GITHUB_OUTPUT
          fi


---

Update your e2e-test job to depend on the above:

e2e-test:
    needs: check-dashboard-changes
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (
        github.event_name == 'pull_request_review' &&
        github.event.review.state == 'approved' &&
        needs.check-dashboard-changes.outputs.dashboard-changed == 'true'
      )
    runs-on: ubuntu-latest
    steps:
      # ... your test steps ...


---

✅ Summary of changes:

Removed dorny/paths-filter@v2

Added a custom check-dashboard-changes job that uses git diff to detect changes in apps/dashboard/

Passed output as dashboard-changed

Updated e2e-test job condition to include this check


Let me know if you want this with comments or need to also update your PR title and commit message.

Perfect! Based on your current PR and the new script-based logic you’re pushing, here’s the updated PR description you can use:


---

Description

Refactored the E2E pipeline to avoid unnecessary test runs and align with GitHub action usage restrictions.

What’s Changed

Removed use of dorny/paths-filter@v2 as it's not permitted by our GitHub org policy.

Added a lightweight inline script using git diff to detect changes under apps/dashboard/** relative to origin/main.

Set output (dashboard-changed) based on this script and used it to gate the E2E test job.

e2e-test job now runs only when:

The PR is approved and includes dashboard changes, or

Triggered via workflow_dispatch or scheduled job.



Why

This keeps the pipeline focused and optimized — only testing when relevant changes are detected — while remaining compatible with CI policy.


---

Let me know if you also want a short comment to notify reviewers of the update.

