Thanks for the clarity! Based on your exact requirements, here is the most accurate and maintainable approach:


---

Your Goal Recap:

You want the E2E pipeline to run on PR approval (pull_request_review).

But only if the PR includes changes under apps/dashboard/**.

Also support workflow_dispatch (manual run) and schedule (nightly).

Avoid running for unrelated PRs (e.g., backend-only changes).



---

✅ Recommended Solution: Use dorny/paths-filter

This is the cleanest and most flexible approach for your case.


---

1. Install dorny/paths-filter step early in the pipeline:

Add this job before e2e-test, name it filter:

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      dashboard: ${{ steps.filter.outputs.dashboard }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            dashboard:
              - 'apps/dashboard/**'


---

2. Use the output of that filter to conditionally run e2e-test:

Update your existing e2e-test job like this:

e2e-test:
    needs: filter
    if: needs.filter.outputs.dashboard == 'true' &&
        (github.event_name != 'pull_request_review' || github.event.review.state == 'approved')
    runs-on: ubuntu-latest
    steps:
      # your existing e2e-test steps here...


---

✅ This does exactly what you want:

Only runs E2E job if:

PR includes dashboard changes

and PR was approved


Also supports workflow_dispatch and schedule without changes.

Keeps your job fast and minimal for unrelated PRs.



---

Let me know if you want help updating your YAML – I can rewrite the block fully if needed.

Great question! If you’re using dorny/paths-filter and want scheduled or manual (workflow_dispatch) runs to always trigger, you can tweak the condition to support both.


---

Here’s how to make it work for all 3 cases:

if: |
  github.event_name == 'workflow_dispatch' ||
  github.event_name == 'schedule' ||
  (
    needs.filter.outputs.dashboard == 'true' &&
    github.event_name == 'pull_request_review' &&
    github.event.review.state == 'approved'
  )

Explanation:

✅ workflow_dispatch: Always allowed

✅ schedule: Always allowed

✅ pull_request_review: Only runs if:

The PR includes dashboard changes (apps/dashboard/**)

And the review state is approved




---

So your job block will look like:

jobs:
  e2e-test:
    needs: filter
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (
        needs.filter.outputs.dashboard == 'true' &&
        github.event_name == 'pull_request_review' &&
        github.event.review.state == 'approved'
      )
    runs-on: ubuntu-latest
    steps:
      # your existing e2e test steps here...

This gives you maximum flexibility without unnecessary runs. Want me to update your full YAML?

Absolutely! Here's a clean and professional set for your PR:


---

PR Title

refactor(ci): optimize E2E pipeline to run only on relevant dashboard changes


---

PR Description

### Summary
Refactored the E2E pipeline to prevent unnecessary test runs on unrelated PRs.

### Key Changes
- Introduced `dorny/paths-filter` to detect changes specifically under `apps/dashboard/**`
- Added a `filter` job to expose change detection via `dashboard` output
- Updated the `e2e-test` job to run only when:
  - The PR is approved **and** includes dashboard-related changes
  - Or the workflow is triggered manually (`workflow_dispatch`)
  - Or it’s a scheduled job (`schedule`)

### Result
The E2E pipeline is now more efficient, skipping runs for backend or unrelated PRs while still allowing manual and scheduled triggers.

Let me know if you'd like to apply similar logic to other packages!


---

Commit Message

refactor(ci): run E2E pipeline only for dashboard changes or manual/scheduled triggers

Let me know if you want a follow-up Jira comment or PR tag suggestion!

Sure! Here's a short and sweet PR description:


---

Description

Refactored the E2E pipeline to run only when:

A PR is approved and includes changes under apps/dashboard/**

Or triggered manually or on a schedule


Used dorny/paths-filter to detect relevant changes and avoid unnecessary E2E runs.


---

Let me know if you need a Jira comment too!

