Absolutely! Here's your s3-keys-stack.test.ts test file inline, written using CDK's assertions and your existing test style (like the Route53 stack test):

import { App } from 'aws-cdk-lib'
import { Match, Template } from 'aws-cdk-lib/assertions'
import { beforeAll, describe, expect, test } from 'vitest'

import { S3KeysStack } from './s3-keys-stack'

describe('S3KeysStack should configure KMS keys correctly', () => {
  let template: Template

  const defaultAccount = '980688131692'
  const environment = 'poc'

  beforeAll(() => {
    const app = new App()

    const stack = new S3KeysStack(app, 's3-keys-stack', {
      env: { account: defaultAccount, region: 'eu-west-1' },
    })

    template = Template.fromStack(stack)
  })

  test('should create a KMS key for S3 code bucket encryption', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      EnableKeyRotation: true,
      Description: Match.stringLikeRegexp('code.*s3 bucket'),
    })
  })

  test('should create a KMS key for S3 logs bucket encryption', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      EnableKeyRotation: true,
      Description: Match.stringLikeRegexp('log files.*s3 buckets'),
    })
  })

  test('should attach a resource policy allowing CloudFront and Lambda decrypt access to code bucket key', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      KeyPolicy: Match.objectLike({
        Statement: Match.arrayWith([
          Match.objectLike({
            Action: Match.arrayWith(['kms:Decrypt']),
            Principal: Match.objectLike({
              Service: Match.arrayWith([
                'cloudfront.amazonaws.com',
                'lambda.amazonaws.com',
              ]),
            }),
          }),
        ]),
      }),
    })
  })

  test('should attach a resource policy allowing CloudWatch decrypt access to logs bucket key', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      KeyPolicy: Match.objectLike({
        Statement: Match.arrayWith([
          Match.objectLike({
            Action: Match.arrayWith(['kms:Decrypt']),
            Principal: Match.objectLike({
              Service: 'cloudwatch.amazonaws.com',
            }),
          }),
        ]),
      }),
    })
  })
})

Let me know if you’d like tests for other permissions or edge cases (e.g. alias, pending window, etc).








Got it! Let’s add the full template.hasResourceProperties check just like your earlier bucket tests. Here's the updated test block with expanded resource properties validation for both s3CodeKey and s3LogsKey:

import { App } from 'aws-cdk-lib';
import { Template } from 'aws-cdk-lib/assertions';
import { describe, test, expect } from 'vitest';
import { S3KeysStack } from './s3-keys-stack';
import { validateStackResource } from './.stackTestUtils';

describe('S3KeysStack', () => {
  const defaultAccount = '980688131692';
  const defaultRegion = 'eu-west-1';

  const app = new App();
  const stack = new S3KeysStack(app, 'S3KeysStack', {
    env: { account: defaultAccount, region: defaultRegion },
  });

  const template = Template.fromStack(stack);

  test('should have a KMS key for S3 code bucket with full properties', () => {
    validateStackResource(template, 'AWS::KMS::Key', /s3CodeKey/, 1);

    template.hasResourceProperties('AWS::KMS::Key', {
      EnableKeyRotation: true,
      Description: 'Encryption key for code stored in S3 buckets',
      PendingWindowInDays: 7,
    });
  });

  test('should have a KMS key for S3 logs bucket with full properties', () => {
    validateStackResource(template, 'AWS::KMS::Key', /s3LogsKey/, 1);

    template.hasResourceProperties('AWS::KMS::Key', {
      EnableKeyRotation: true,
      Description: 'Encryption key for log files in s3 buckets',
      PendingWindowInDays: 7,
    });
  });
});

Let me know if you're also assigning any aliases or key policies that you want to validate — we can test for those too.

Absolutely! Here's the regenerated set of separate, clear, and accurate tests for your S3KeysStack, based on everything you’ve shared — including debug values, actual template.Resources, and your coding style.


---

S3KeysStack Test (s3-keys-stack.test.ts)

import { App, Duration, Template } from 'aws-cdk-lib';
import { beforeAll, describe, expect, test } from 'vitest';
import { S3KeysStack } from './s3-keys-stack';

describe('S3KeysStack should configure KMS keys correctly', () => {
  let template: Template;

  const defaultAccount = '980688131692';
  const defaultRegion = 'eu-west-1';

  beforeAll(() => {
    const app = new App();
    const stack = new S3KeysStack(app, 's3-keys-stack', {
      env: { account: defaultAccount, region: defaultRegion },
      terminationProtection: true,
    });

    template = Template.fromStack(stack);
  });

  // ----------------------------
  // KMS Key Creation Checks
  // ----------------------------

  test('should create a KMS key for S3 code bucket encryption', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      EnableKeyRotation: true,
      Description: 'Encryption key for code stored in S3 buckets',
    });
  });

  test('should create a KMS key for S3 logs bucket encryption', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      EnableKeyRotation: true,
      Description: 'Encryption key for log files in s3 buckets',
    });
  });

  // ----------------------------
  // Resource Policy: Code Key
  // ----------------------------

  test('should attach resource policy allowing CloudFront and Lambda to decrypt the code bucket key', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      KeyPolicy: {
        Statement: expect.arrayContaining([
          expect.objectContaining({
            Sid: 'Statement for code decryption',
            Action: ['kms:GenerateDataKey', 'kms:Decrypt'],
            Principal: {
              Service: ['cloudfront.amazonaws.com', 'lambda.amazonaws.com'],
            },
            Condition: {
              StringEquals: { 'aws:SourceAccount': defaultAccount },
            },
          }),
        ]),
      },
    });
  });

  test('should attach resource policy allowing AWS Config to encrypt using the code bucket key', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      KeyPolicy: {
        Statement: expect.arrayContaining([
          expect.objectContaining({
            Sid: 'Statement for code encryption',
            Action: ['kms:GenerateDataKey', 'kms:Encrypt'],
            Principal: {
              Service: 'config.amazonaws.com',
            },
            Condition: {
              StringEquals: { 'aws:SourceAccount': defaultAccount },
            },
          }),
        ]),
      },
    });
  });

  // ----------------------------
  // Resource Policy: Logs Key
  // ----------------------------

  test('should attach resource policy allowing CloudWatch to decrypt the logs bucket key', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      KeyPolicy: {
        Statement: expect.arrayContaining([
          expect.objectContaining({
            Sid: 'Statement for log decryption',
            Action: ['kms:GenerateDataKey', 'kms:Decrypt'],
            Principal: {
              Service: 'cloudwatch.amazonaws.com',
            },
            Condition: {
              StringEquals: { 'aws:SourceAccount': defaultAccount },
            },
          }),
        ]),
      },
    });
  });

  test('should attach resource policy allowing any principal to encrypt using the logs bucket key', () => {
    template.hasResourceProperties('AWS::KMS::Key', {
      KeyPolicy: {
        Statement: expect.arrayContaining([
          expect.objectContaining({
            Sid: 'Statement for log encryption',
            Action: ['kms:GenerateDataKey', 'kms:Encrypt'],
            Principal: { AWS: '*' },
            Condition: {
              StringEquals: { 'aws:SourceAccount': defaultAccount },
            },
          }),
        ]),
      },
    });
  });
});


---

Summary of What This Covers:

[x] Separate test per key and action (good for CI clarity)

[x] Covers EnableKeyRotation, Description, and key policies

[x] Matches your debug data exactly (principal, sid, condition)

[x] No use of loose Match.objectLike() unless necessary (per your request)

[x] Aligned with your structure and stack config



---

Let me know if you want to:

Add alias checks (AWS::KMS::Alias)

Add Retain policy checks

Add shared helper for DRY test logic


Ready to plug this in and go!


Perfect — let’s continue with your existing style and enhance it using the same hasResourceProperties + expect.arrayContaining approach you shared.

Here are the two updated test cases to validate the resource policies on the KMS keys (for both decryption and encryption) using your pattern:


---

✅ Decryption for code bucket key (CloudFront + Lambda)

test('should attach resource policy allowing CloudFront and Lambda to decrypt the code bucket key', () => {
  template.hasResourceProperties('AWS::KMS::Key', {
    KeyPolicy: {
      Statement: expect.arrayContaining([
        expect.objectContaining({
          Sid: 'Statement for code decryption',
          Action: ['kms:GenerateDataKey', 'kms:Decrypt'],
          Principal: {
            Service: ['cloudfront.amazonaws.com', 'lambda.amazonaws.com'],
          },
          Condition: {
            StringEquals: {
              'aws:SourceAccount': defaultAccount,
            },
          },
        }),
      ]),
    },
  });
});


---

✅ Encryption for code bucket key (AWS Config)

test('should attach resource policy allowing AWS Config to encrypt using the code bucket key', () => {
  template.hasResourceProperties('AWS::KMS::Key', {
    KeyPolicy: {
      Statement: expect.arrayContaining([
        expect.objectContaining({
          Sid: 'Statement for code encryption',
          Action: ['kms:GenerateDataKey', 'kms:Encrypt'],
          Principal: {
            Service: 'config.amazonaws.com',
          },
          Condition: {
            StringEquals: {
              'aws:SourceAccount': defaultAccount,
            },
          },
        }),
      ]),
    },
  });
});


---

These follow your format exactly — no need to change your utils or stack structure. You can duplicate this same pattern for the logs key (CloudWatch decrypt and AnyPrincipal encrypt) too.

Let me know if you'd like those added as well!


template.hasResourceProperties('AWS::KMS::Key', Match.objectLike({
  KeyPolicy: Match.objectLike({
    Statement: Match.arrayContaining([
      Match.objectLike({
        Sid: 'Statement for code decryption',
        Action: ['kms:GenerateDataKey', 'kms:Decrypt'],
        Principal: {
          Service: ['cloudfront.amazonaws.com', 'lambda.amazonaws.com'],
        },
        Condition: {
          StringEquals: {
            'aws:SourceAccount': defaultAccount,
          },
        },
      }),
    ]),
  }),
}));

Thanks! The error is likely due to multiple KMS keys in the template (code key + logs key), and hasResourceProperties doesn’t know which one to match. Since you're using hasResourceProperties with a broad resource type (AWS::KMS::Key), it tries to match any of them, but fails because your expectation doesn’t cover all policies exactly.

Let’s fix this by filtering only the relevant key using a helper — similar to validateStackResource — so you can directly test properties of only the code key or logs key.


---

Step 1: Update your test to use your helper

Change:

template.hasResourceProperties('AWS::KMS::Key', {
  KeyPolicy: { ... }
});

To:

const codeKey = validateStackResource(
  template,
  'AWS::KMS::Key',
  2, // total keys
  0, // 0th one is code key
);
expect(codeKey.Properties.KeyPolicy).toEqual({
  Version: '2012-10-17',
  Statement: expect.arrayContaining([
    expect.objectContaining({
      Sid: 'Statement for code decryption',
      Action: ['kms:GenerateDataKey', 'kms:Decrypt'],
      Principal: {
        Service: ['cloudfront.amazonaws.com', 'lambda.amazonaws.com'],
      },
      Condition: {
        StringEquals: {
          'aws:SourceAccount': defaultAccount,
        },
      },
    }),
  ]),
});

Do the same for the config encryption test but with 1 as the rsrcPosition to target the logs key if needed.


---

Step 2: Keep validateStackResource as it is

You already have this in .stackTestUtils.ts:

export function validateStackResource(
  template: Template,
  resourceType: string,
  resourceCount: number,
  rsrcPosition: number,
  idRegEx: RegExp
) {
  const resources = template.findResources(resourceType);
  expect(Object.keys(resources).length).toEqual(resourceCount);
  const resourceId = Object.keys(resources)[rsrcPosition];
  expect(resourceId).toMatch(idRegEx);
  return resources[resourceId];
}

Just pass a regex like /^embers3CodeKey/ or /^embers3LogsKey/.


---

This ensures you're validating one specific KMS key (either code or logs), not both at once — avoiding ambiguity and matching problems.

Would you like me to write the final working code for both?

Here’s the proper test structure to validate the creation of two KMS aliases (one for the code bucket and one for the logs bucket), assuming you're using validateStackResource to confirm their presence, and template.hasResourceProperties to assert specific alias names.

import { App } from 'aws-cdk-lib';
import { Template } from 'aws-cdk-lib/assertions';
import { beforeAll, describe, expect, test } from 'vitest';
import { validateStackResource } from './stackTestUtils';
import { S3KeysStack } from './s3-keys-stack';

describe('S3KeysStack should configure KMS aliases correctly', () => {
  let template: Template;
  const defaultAccount = '980688131692';

  beforeAll(() => {
    const app = new App();
    const stack = new S3KeysStack(app, 's3-keys-stack', {
      env: { account: defaultAccount, region: 'eu-west-1' },
      terminationProtection: true,
    });
    template = Template.fromStack(stack);
  });

  test('should create 2 KMS aliases: one for code bucket and one for logs bucket', () => {
    validateStackResource(
      template,
      'AWS::KMS::Alias',
      2, // One alias for code key and one for logs key
      0,
    );

    template.hasResourceProperties('AWS::KMS::Alias', {
      AliasName: 'alias/s3CodeKey',
    });

    template.hasResourceProperties('AWS::KMS::Alias', {
      AliasName: 'alias/s3LogsKey',
    });
  });
});

What this test does:

Verifies that exactly 2 aliases are present (validateStackResource).

Verifies that both expected aliases (alias/s3CodeKey and alias/s3LogsKey) exist via hasResourceProperties.


Let me know if you also want to validate which key each alias is pointing to via TargetKeyId.


Great! Based on your existing test structure, here are two separate tests for validating the code bucket alias and logs bucket alias individually—just like your current validateStackResource tests:

test('should create a KMS alias for S3 code bucket key', () => {
  validateStackResource(
    template,
    'AWS::KMS::Alias',
    2, // Total aliases expected
    0, // Position of code key alias
  );

  template.hasResourceProperties('AWS::KMS::Alias', {
    AliasName: 'alias/s3CodeKey',
  });
});

test('should create a KMS alias for S3 logs bucket key', () => {
  validateStackResource(
    template,
    'AWS::KMS::Alias',
    2, // Total aliases expected
    1, // Position of logs key alias
  );

  template.hasResourceProperties('AWS::KMS::Alias', {
    AliasName: 'alias/s3LogsKey',
  });
});

Why this works:

You're checking AWS::KMS::Alias resources individually by index (0 and 1).

You're asserting the specific alias names using hasResourceProperties.


Let me know if you also want to confirm TargetKeyId for each alias in these tests.



