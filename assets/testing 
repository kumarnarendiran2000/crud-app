That’s a great idea! Moving the Allure report generation and opening logic to a dedicated script in package.json keeps your WebdriverIO config cleaner, more maintainable, and reusable across CI/CD and local runs. 🚀


---

✅ Steps to Implement This Clean Approach

1️⃣ Modify package.json to Add Scripts

Add these scripts inside "scripts" in package.json:

"scripts": {
  "generate-allure-report": "npx allure generate --single-file --clean -o reports/allure-report reports/allure/allure-results",
  "open-allure-report": "npx allure open reports/allure-report"
}

2️⃣ Modify wdio.conf.ts

Now, in wdio.conf.ts, replace the execFileSync calls with this:

import { execFileSync } from 'child_process';

export const config: WebdriverIO.Config = {
  onComplete() {
    console.log('✅ All tests completed! Generating Allure report...');

    try {
      // Run the new package.json script instead of manually calling execFileSync
      execFileSync('npm', ['run', 'generate-allure-report'], { stdio: 'inherit' });

      console.log('✅ Allure report generated. You can open it manually with:');
      console.log('👉 npm run open-allure-report');

    } catch (error) {
      console.error('❌ Error generating Allure report:', error);
    }
  }
};


---

🔹 Why This Approach is Better?

✔ Keeps wdio.conf.ts cleaner – No need for inline shell commands.
✔ Easier to maintain – Scripts are reusable in CI/CD and local environments.
✔ Improves CI/CD flexibility – CI can generate the report but not force-open it, letting developers open it if needed.
✔ Avoids OS-specific logic (cmd start, open, xdg-open) – Instead, users run npm run open-allure-report themselves.


---

🚀 Next Steps

1️⃣ Update package.json with the new scripts.
2️⃣ Modify wdio.conf.ts to use execFileSync('npm', ['run', 'generate-allure-report']).
3️⃣ Run your tests and confirm:

npm run test:e2e

4️⃣ After test completion, manually open the report with:

npm run open-allure-report

5️⃣ For CI/CD Pipelines – Just use:

npm run generate-allure-report


---

📌 Summary

✅ Removed inline shell commands from wdio.conf.ts.
✅ Delegated report generation & opening to package.json scripts.
✅ CI/CD now only generates the report, and users can open it manually.

This keeps things clean, structured, and easily maintainable! 🚀 Let me know if you need any tweaks.


That sounds like a clean and structured approach! 🚀

Here’s the final implementation plan based on your idea:


---

1️⃣ Update wdio.conf.ts (Logging Instructions Instead of Running the Script)

Modify your onComplete function to just log the next steps instead of executing the script.

import debug from 'debug';

const log = debug('wdio');

export const config: WebdriverIO.Config = {
  onComplete() {
    log('✅ All tests are completed!');

    log('ℹ️ To generate the Allure report, run:');
    log('   👉 pnpm run generate-allure-report');

    log('ℹ️ To open the Allure report manually, run:');
    log('   👉 pnpm run open-allure-report');
  }
};

✅ Why This Works?

No more executing commands in wdio.conf.ts—just logging what needs to be done.

Keeps test execution clean and modular.

Helps developers know what to do next without forcing unnecessary actions.



---

2️⃣ Update package.json with Allure Scripts

Ensure you have these scripts in package.json:

"scripts": {
  "generate-allure-report": "npx allure generate --single-file --clean -o reports/allure-report reports/allure/allure-results",
  "open-allure-report": "npx allure open reports/allure-report"
}

✅ Why This Works?

Keeps CI/CD and local workflows consistent.

No need for hardcoded shell commands in config files.

Easy for developers to manually generate or view reports.



---

3️⃣ Modify CI/CD Pipeline to Trigger Allure Report Generation

Add a dedicated step in your CI/CD pipeline to run the report generation script.

📌 Example GitHub Actions Step

- name: Generate Allure Report
  run: pnpm run generate-allure-report

📌 Example GitLab CI Step

generate_allure_report:
  script:
    - pnpm run generate-allure-report

✅ Why This Works?

The pipeline will only generate the report when needed.

Developers don’t have to manually trigger it unless required.

The report will be generated and stored as an artifact.



---

4️⃣ Modify Pipeline to Upload Allure Report as an Artifact

Ensure the Allure report is uploaded as an artifact so it can be accessed later.

📌 GitHub Actions Example

- name: Upload Allure Report
  uses: actions/upload-artifact@v4
  with:
    name: allure-report
    path: reports/allure-report

📌 GitLab CI Example

artifacts:
  paths:
    - reports/allure-report
  expire_in: 7 days  # Keep artifacts for 7 days

✅ Why This Works?

The report will be saved and accessible after the pipeline completes.

No need to open it manually on the server.



---

🚀 Final Workflow Overview

1️⃣ Tests complete → WebdriverIO logs instructions to generate/view the report.
2️⃣ In CI/CD → The pipeline runs pnpm run generate-allure-report.
3️⃣ Report is stored as an artifact (can be downloaded anytime).
4️⃣ Developers can manually open the report using pnpm run open-allure-report if needed.


---

📌 Why This is the Best Approach?

✅ Keeps test execution lightweight → No unnecessary commands in wdio.conf.ts.
✅ Makes Allure report optional for local runs → Only generate it when needed.
✅ CI/CD automation → Ensures reports are always available as artifacts.
✅ Improves maintainability → No hardcoded shell commands in test configs.

This perfectly balances automation, maintainability, and flexibility! 🚀
Let me know if you need any refinements!


Yes! Here's a refined version of your comment with a better flow while keeping it clear and professional:


---

Code Review Comment:

"Initially, I tried to fix the security vulnerability flagged by CodeQL by executing the Allure report generation script without shell: true, but after multiple attempts, it wasn’t possible to execute it directly.

Instead of forcing a workaround, I made the following changes:
1️⃣ Removed direct execution of the report generation command in wdio.conf.ts.
2️⃣ Added logs to guide developers on how to generate and open the Allure report manually (pnpm run generate-allure-report and pnpm run open-allure-report).
3️⃣ Created dedicated scripts in package.json to properly handle report generation.
4️⃣ Updated the CI pipeline to call the report generation script before uploading it as an artifact.

This approach ensures security best practices, keeps the process structured, and maintains automation where needed. Let me know if you have any feedback!"


---

✅ Why This Works?

Starts with the challenge faced → "Initially, I tried to fix..."

Explains the failed approach concisely → "It wasn’t possible to execute it directly."

Clearly lists the structured changes made.

Ends professionally with an invitation for feedback.


This keeps it natural, clear, and review-friendly! 🚀 Let me know if you'd like any tweaks.



