seeHere’s your full test code written in standard format for a Pactum-based integration test of the /feedback endpoint:

import { spec } from 'pactum'
import { rrFeedbackSchema } from '@/schema/rant-and-rave.schema'
import { API_BASE_URL } from '../constants'

const mockCustomerData = {
  thisCkGuid: 'mock-guid-123',
  firstName: 'Test',
  lastName: 'User',
  email: 'test.user@example.com',
  mobile: '1234567890',
}

const mockFeedbackRequest = {
  feedback: 'Very helpful experience!',
  rating: 5,
}

const expectedRrFeedbackRequestBody = {
  CustomerCKGUID: mockCustomerData.thisCkGuid,
  CustomerFirstName: mockCustomerData.firstName,
  CustomerLastName: mockCustomerData.lastName,
  CustomerEmail: mockCustomerData.email,
  CustomerMobile: mockCustomerData.mobile,
  FeedbackComment: mockFeedbackRequest.feedback,
  FeedbackRating: mockFeedbackRequest.rating,
  FeedbackSource: 'Web',
}

describe('POST /feedback - Submit Feedback to Rant & Rave', () => {
  it('should successfully send feedback payload and return status 200', async () => {
    await spec()
      .post(`${API_BASE_URL}/feedback`)
      .withHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      })
      .withBody(mockFeedbackRequest)
      .expectStatus(200)
      .expectJsonLike({ status: 'success' })

    // Optionally validate the transformed body against schema
    expect(rrFeedbackSchema.safeParse(expectedRrFeedbackRequestBody).success).toBe(true)
  })
})

Let me know if you’d like to split this into web/mobile variants, or add error case scenarios.

Great follow-up! Yes — you’re absolutely right to improve this by removing the hardcoded customer data and instead mocking it via spies, just like we discussed earlier.


---

Here’s how you can properly do it in your feedback.test.ts file:

1. Mock getCustomer() using vi.spyOn

This will return mocked customer data used inside the service (submitFeedback()):

import * as customerWrapper from '@/wrappers/customer'

const mockCustomerResponse = {
  customerSession: {
    ckguid: 'mock-guid-123',
    firstName: 'Test',
    lastName: 'User',
    email: 'test.user@example.com',
    mobile: '1234567890',
  }
}

vi.spyOn(customerWrapper, 'getCustomer').mockResolvedValue(mockCustomerResponse)

2. Mock axios.post() or xior.post() to simulate successful Rant & Rave submission

If you're still using axios, then:

import axios from 'axios'

vi.spyOn(axios, 'post').mockResolvedValue({
  status: 202,
  data: '', // Rant & Rave typically returns no body
})

Or if it’s xior, same idea:

import xior from 'xior'

vi.spyOn(xior, 'post').mockResolvedValue({
  status: 202,
  data: '',
})

> This ensures your Ember backend handler works independently of Rant & Rave in integration tests.




---

Final Touch: Your Test with Mocks

import { spec } from 'pactum'
import { vi } from 'vitest'
import * as customerWrapper from '@/wrappers/customer'
import axios from 'axios' // or xior
import { rrFeedbackSchema } from '@/schema/rant-and-rave.schema'

const mockCustomerResponse = {
  customerSession: {
    ckguid: 'mock-guid-123',
    firstName: 'Test',
    lastName: 'User',
    email: 'test.user@example.com',
    mobile: '1234567890',
  }
}

const mockFeedbackRequest = {
  feedback: 'Very helpful experience!',
  rating: 5,
}

describe('POST /feedback - Submit Feedback to Rant & Rave', () => {
  beforeEach(() => {
    vi.spyOn(customerWrapper, 'getCustomer').mockResolvedValue(mockCustomerResponse)
    vi.spyOn(axios, 'post').mockResolvedValue({ status: 202, data: '' })
  })

  it('should send feedback and return 202', async () => {
    await spec()
      .post('/secure/api/feedback') // adjust if needed
      .withHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      })
      .withBody(mockFeedbackRequest)
      .expectStatus(202)
      .expectJsonLike({ message: 'Feedback received for submission' })
  })
})


---

Summary

Customer details: Mocked using vi.spyOn(getCustomer)

Third-party POST call: Mocked using vi.spyOn(axios.post) or xior.post

Response schema check (optional): You can still safeParse() the constructed rrFeedbackRaw payload if needed — by spying on internal method or breaking it into a helper.


Let me know if you want that optional schema validation too, or need to add mobile/web variations!

Yes — your plan is spot on and a very clean approach for this kind of integration testing setup. Here's how it works and why it’s great:


---

Why calling /secure/api/customer-overview via spec() is better here

Your Ember backend already calls Mock SLAL for customer data in local/test env.

The integration test will exercise the real logic inside getCustomer() indirectly.

You don’t need to import or spy on cross-package files — this keeps the test decoupled.

You can extract ckguid, name, email, etc. from the response to build the payload.



---

✅ Flow for your Integration Test

1. Make a GET /secure/api/customer-overview call via spec()
→ Ember hits Mock SLAL → Returns test customer response


2. Extract required fields like:

customerSession.ckguid

firstName, lastName

email, mobile



3. Use this dynamic data to build rrFeedbackRaw (or simplified request)


4. POST to /secure/api/feedback with that constructed payload
→ Your backend will use the same flow, including the Rant & Rave POST call (which you will mock)




---

Sample Test Skeleton (Concept)

import { spec } from 'pactum'
import { vi } from 'vitest'
import axios from 'axios'

describe('POST /feedback - Integration using real mock customer data', () => {
  let customerData: any

  beforeAll(async () => {
    const res = await spec()
      .get('/secure/api/customer-overview')
      .withCookies('ck', 'your-test-cookie') // if needed
      .expectStatus(200)

    customerData = res.body?.customerSession
  })

  beforeEach(() => {
    vi.spyOn(axios, 'post').mockResolvedValue({ status: 202, data: '' })
  })

  it('should send feedback with extracted customer details', async () => {
    const feedbackRequest = {
      feedback: 'Smooth experience!',
      rating: 5,
    }

    const expectedRrPayload = {
      CustomerCKGUID: customerData.ckguid,
      CustomerFirstName: customerData.firstName,
      CustomerLastName: customerData.lastName,
      CustomerEmail: customerData.email,
      CustomerMobile: customerData.mobile,
      FeedbackComment: feedbackRequest.feedback,
      FeedbackRating: feedbackRequest.rating,
      FeedbackSource: 'Web',
      // other required fields if needed
    }

    await spec()
      .post('/secure/api/feedback')
      .withHeaders({ 'Content-Type': 'application/json' })
      .withBody(feedbackRequest)
      .expectStatus(202)
      .expectJsonLike({ message: 'Feedback received for submission' })

    // Optional: validate schema
    // expect(rrFeedbackSchema.safeParse(expectedRrPayload).success).toBe(true)
  })
})


---

Advantages

Cleaner than spying across packages

Truly mimics the production flow — from fetching user to sending feedback

You keep feedback logic untouched and only isolate the third-party dependency (R&R)



---

Let me know if you’d like the full test code with dynamic construction and safe parse check!

Perfect — that confirms it: your request is getting rejected by the OpenAPI route-level validation, before your Hono handler (handlePOSTFeedback) is even called.

This happens when headers or body do not match the Zod schema defined in the createRoute() spec.


---

What’s going wrong?

Since you’re using factory.createHandler() with a schema like this:

headers: z.object({
  'is-mobile-app': z.enum(['true', 'false']).optional(),
  SLPlatform: z.enum(['ios', 'android']).optional(),
}),

If your test doesn’t send these headers correctly, or sends them in the wrong format, Hono will block the request at the route level and respond with 400.


---

Debug steps for you right now:

✅ 1. Double check your test call

Ensure you're setting the headers exactly as expected (case-sensitive match too):

await spec()
  .post(`${baseUrl}/secure/api/feedback`)
  .withHeaders({
    'content-type': 'application/json',
    accept: 'application/json',
    'is-mobile-app': 'false',      // MUST be string 'false'
    'slplatform': 'android'        // lowercase keys only if route schema allows
  })
  .withJson(feedbackRequest)
  .expectStatus(202)

> Note: If you’re using lowercase header names in .withHeaders(), but your z.object() schema uses SLPlatform (PascalCase), it won’t match. Hono does not auto-normalize keys.



Fix: Update your schema keys to lowercase:

headers: z.object({
  'is-mobile-app': z.enum(['true', 'false']).optional(),
  'slplatform': z.enum(['ios', 'android']).optional()
})


---

✅ 2. Add .inspect() or .log()

In your test:

await spec()
  .post(...)
  .withHeaders(...)
  .withJson(...)
  .inspect()  // shows full request + response
  .expectStatus(202);

This will show the exact reason for 400 (usually a Zod validation failure).


---

✅ 3. Temporarily remove schema to test flow

To confirm the handler is wired properly, comment out the headers part of the routeSpec:

const routeSpec = createRoute({
  ...
  // headers: z.object({ ... }),   <-- comment this
})

If it starts working, then it's 100% a schema/header mismatch.


---

Would you like me to rewrite your header schema and test headers to match exactly?

vi.mock('@/lambdaContext', () => ({
  SECRETS: {
    rantAndRave: {
      rantAndRaveUsername: 'mockUser',
      rantAndRavePassword: 'mockPwd',
      rantAndRaveApiKey: 'mockApiKey',
    },
    raindropPensionFinder: undefined,
    moneyHub: undefined,
  },
  LAST_REFRESH: { secrets: 'mocked' },
  LIVE_SINCE: new Date(),
  CONFIG: new (class MockConfig {})(),
}));